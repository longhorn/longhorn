name: "[Issue Management] Create Issue"
on:
  issues:
    types: [ labeled ]
jobs:
  backport:
    runs-on: ubuntu-latest
    if: contains(github.event.label.name, 'backport/')
    steps:
    - id: app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ secrets.LONGHORN_GITHUB_BOT_APP_ID }}
        private-key: ${{ secrets.LONGHORN_GITHUB_BOT_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
        permission-contents: write
        permission-pull-requests: write
        permission-members: read
        permission-organization-projects: write
        permission-issues: write

    - name: Is Longhorn Member
      uses: tspascoal/get-user-teams-membership@v3
      id: is-longhorn-member
      with:
        username: ${{ github.actor }}
        organization: longhorn
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Get Backport Version
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null
      uses: xom9ikk/split@v1
      id: split
      with:
        string: ${{ github.event.label.name }}
        separator: /

    - name: Check if Backport Issue Exists
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null
      uses: actions-cool/issues-helper@v3
      id: if-backport-issue-exists
      with:
        actions: 'find-issues'
        token: ${{ github.token }}
        issue-state: 'all'
        labels: 'kind/backport'
        issue-creator: 'github-actions[bot]'
        title-includes: |
          [BACKPORT][v${{ steps.split.outputs._1 }}]${{ github.event.issue.title }}

    - name: Get Milestone Object
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null && fromJSON(steps.if-backport-issue-exists.outputs.issues)[0] == null
      uses: longhorn/bot/milestone-action@master
      id: milestone
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        milestone_name: v${{ steps.split.outputs._1 }}

    - name: Get Labels
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null && fromJSON(steps.if-backport-issue-exists.outputs.issues)[0] == null
      id: labels
      run: |
        RAW_LABELS="${{ join(github.event.issue.labels.*.name, ' ') }}"
        RAW_LABELS="${RAW_LABELS} kind/backport"
        echo "RAW LABELS: $RAW_LABELS"
        LABELS=$(echo "$RAW_LABELS" | sed -r 's/\s*backport\S+//g' | sed -r 's/\s*require\/auto-e2e-test//g' | xargs | sed 's/ /, /g')
        echo "LABELS: $LABELS"
        echo "labels=$LABELS" >> $GITHUB_OUTPUT

    - name: Get Longhorn Members
      uses: longhorn/bot/filter-org-members-action@master
      id: longhorn-members
      with:
        token: ${{ steps.app-token.outputs.token }}
        organization: longhorn
        usernames: ${{ join(github.event.issue.assignees.*.login, ', ') }}

    - name: Create Backport Issue
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null && fromJSON(steps.if-backport-issue-exists.outputs.issues)[0] == null
      uses: dacbd/create-issue-action@main
      id: new-issue
      with:
        token: ${{ github.token }}
        title: |
          [BACKPORT][v${{ steps.split.outputs._1 }}]${{ github.event.issue.title }}
        body: |
          backport ${{ github.event.issue.html_url }}
        labels: ${{ steps.labels.outputs.labels }}
        milestone: ${{ fromJSON(steps.milestone.outputs.data).number }}
        assignees: ${{ join(fromJSON(steps.longhorn-members.outputs.members), ', ') }}

    - name: Reopen Backport Issue
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null && fromJSON(steps.if-backport-issue-exists.outputs.issues)[0] != null && fromJSON(steps.if-backport-issue-exists.outputs.issues)[0].state == 'closed'
      uses: actions-cool/issues-helper@v3
      with:
        actions: 'update-issue'
        token: ${{ steps.app-token.outputs.token }}
        issue-number: ${{ fromJSON(steps.if-backport-issue-exists.outputs.issues)[0].number }}
        state: 'open'

  automation:
    runs-on: ubuntu-latest
    if: contains(github.event.label.name, 'require/auto-e2e-test')
    steps:
    - id: app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ secrets.LONGHORN_GITHUB_BOT_APP_ID }}
        private-key: ${{ secrets.LONGHORN_GITHUB_BOT_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
        permission-contents: write
        permission-pull-requests: write
        permission-members: read
        permission-organization-projects: write
        permission-issues: write

    - name: Is Longhorn Member
      uses: tspascoal/get-user-teams-membership@v3
      id: is-longhorn-member
      with:
        username: ${{ github.actor }}
        organization: longhorn
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Check if Automation Issue Exists
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null
      uses: actions-cool/issues-helper@v3
      id: if-automation-issue-exists
      with:
        actions: 'find-issues'
        token: ${{ github.token }}
        issue-state: 'all'
        labels: 'kind/test'
        issue-creator: 'github-actions[bot]'
        title-includes: |
          [TEST]${{ github.event.issue.title }}

    - name: Create Automation Test Issue
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null && fromJSON(steps.if-automation-issue-exists.outputs.issues)[0] == null
      uses: dacbd/create-issue-action@main
      id: create-automation-test-issue
      with:
        token: ${{ github.token }}
        title: |
          [TEST]${{ github.event.issue.title }}
        body: |
          adding/updating auto e2e test cases for ${{ github.event.issue.html_url }} if they can be automated
          
          cc @longhorn/qa
        labels: kind/test

    - name: Add Issue to QA & Devops Project
      if: steps.create-automation-test-issue.outcome == 'success'
      uses: longhorn/bot/add-to-project-action@master
      with:
        project-url: https://github.com/orgs/longhorn/projects/4
        issue-node-id: ${{ fromJSON(steps.create-automation-test-issue.outputs.json).node_id }}
        github-token: ${{ steps.app-token.outputs.token }}

  ui:
    runs-on: ubuntu-latest
    if: contains(github.event.label.name, 'require/ui')
    steps:
    - id: app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ secrets.LONGHORN_GITHUB_BOT_APP_ID }}
        private-key: ${{ secrets.LONGHORN_GITHUB_BOT_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
        permission-contents: write
        permission-pull-requests: write
        permission-members: read
        permission-organization-projects: write
        permission-issues: write

    - name: Is Longhorn Member
      uses: tspascoal/get-user-teams-membership@v3
      id: is-longhorn-member
      with:
        username: ${{ github.actor }}
        organization: longhorn
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Check if UI Issue Exists
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null
      uses: actions-cool/issues-helper@v3
      id: if-ui-issue-exists
      with:
        actions: 'find-issues'
        token: ${{ steps.app-token.outputs.token }}
        issue-state: 'all'
        labels: 'area/ui'
        issue-creator: 'github-actions[bot]'
        title-includes: |
          [UI]${{ github.event.issue.title }}

    - name: Get Labels
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null && fromJSON(steps.if-ui-issue-exists.outputs.issues)[0] == null
      id: labels
      run: |
        RAW_LABELS="${{ join(github.event.issue.labels.*.name, ' ') }}"
        echo "RAW LABELS: $RAW_LABELS"
        LABELS=$(echo "$RAW_LABELS" | sed -r 's/\s*backport\S+//g' | sed -r 's/\s*require\/ui//g' | xargs | sed 's/ /, /g')
        echo "LABELS: $LABELS"
        echo "labels=$LABELS" >> $GITHUB_OUTPUT

    - name: Create UI Test Issue
      if: fromJSON(steps.is-longhorn-member.outputs.teams)[0] != null && fromJSON(steps.if-ui-issue-exists.outputs.issues)[0] == null
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: |
          [UI]${{ github.event.issue.title }}
        body: |
          make corresponding UI changes for ${{ github.event.issue.html_url }}

          cc @longhorn/dev-ui
        labels: ${{ steps.labels.outputs.labels }}, area/ui
        milestone: ${{ github.event.issue.milestone.number }}
